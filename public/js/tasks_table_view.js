// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $((function(_this) {
    return function() {
      return _this.TasksTableView = (function(_super) {
        __extends(TasksTableView, _super);

        function TasksTableView() {
          _this.on_new = __bind(_this.on_new, this);
          _this.render = __bind(_this.render, this);
          return TasksTableView.__super__.constructor.apply(this, arguments);
        }

        TasksTableView.prototype.events = {
          'click #new': 'on_new'
        };

        TasksTableView.prototype.template = _.template($('#tasks_table_template').html());

        TasksTableView.prototype.render = function() {
          this.$el.html(this.template({
            task_count: this.collection.models.length
          }));
          $.each(this.collection.models, (function(_this) {
            return function(index, item) {
              var view;
              view = new TaskRowView({
                model: item
              });
              return _this.$el.find('tbody').append(view.render().el);
            };
          })(this));
          return this;
        };

        TasksTableView.prototype.on_new = function(e) {
          e.preventDefault();
          return app.navigate('task_new', {
            trigger: true
          });
        };

        return TasksTableView;

      })(Backbone.View);
    };
  })(this));

}).call(this);
