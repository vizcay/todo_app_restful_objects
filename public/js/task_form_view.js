// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $((function(_this) {
    return function() {
      return _this.TaskFormView = (function(_super) {
        __extends(TaskFormView, _super);

        function TaskFormView() {
          _this.on_due_by_change = __bind(_this.on_due_by_change, this);
          _this.on_project_change = __bind(_this.on_project_change, this);
          _this.on_description_change = __bind(_this.on_description_change, this);
          _this.on_delete = __bind(_this.on_delete, this);
          _this.on_cancel = __bind(_this.on_cancel, this);
          _this.on_revert = __bind(_this.on_revert, this);
          _this.on_save = __bind(_this.on_save, this);
          _this.on_create = __bind(_this.on_create, this);
          _this.render = __bind(_this.render, this);
          return TaskFormView.__super__.constructor.apply(this, arguments);
        }

        TaskFormView.prototype.events = {
          'click #create': 'on_create',
          'click #save': 'on_save',
          'click #revert': 'on_revert',
          'click #cancel': 'on_cancel',
          'click #delete': 'on_delete',
          'change #task_description': 'on_description_change',
          'change #project': 'on_project_change',
          'change #task_due_by': 'on_due_by_change'
        };

        TaskFormView.prototype.template = _.template($('#task_form_template').html());

        TaskFormView.prototype.render = function() {
          var resources, resources_table_view;
          this.projects = new Projects;
          this.projects.fetch({
            async: false
          });
          this.$el.html(this.template(this.model.attributes));
          $.each(this.projects.models, (function(_this) {
            return function(index, project) {
              return _this.$el.find('select#project').append("<option value=\"" + (project.url()) + "\"> " + (project.get('description')) + " </option>");
            };
          })(this));
          if (this.model.isNew()) {
            resources = new Resources;
            this.$el.find('#save, #delete, #revert').hide();
          } else {
            resources = this.model.resources;
            this.$el.find('select#project').val(this.model.get('project'));
            this.$el.find('#create, #cancel').hide();
          }
          resources_table_view = new ResourcesTableView({
            collection: resources,
            el: this.$el.find('#resources_placeholder')
          });
          resources_table_view.render();
          return this;
        };

        TaskFormView.prototype.on_create = function() {
          return this.model.save(this.model.attributes, {
            wait: true,
            success: function() {
              return app.navigate('tasks_list', {
                trigger: true
              });
            }
          });
        };

        TaskFormView.prototype.on_save = function() {
          return this.model.save(this.model.changedAttributes(), {
            wait: true,
            success: (function(_this) {
              return function() {
                return Backbone.history.loadUrl();
              };
            })(this)
          });
        };

        TaskFormView.prototype.on_revert = function() {
          return app.task_view(this.model.get('id'));
        };

        TaskFormView.prototype.on_cancel = function() {
          return app.navigate('tasks_list', {
            trigger: true
          });
        };

        TaskFormView.prototype.on_delete = function() {
          return this.model.destroy({
            wait: true,
            success: function() {
              return app.navigate('tasks_list', {
                trigger: true
              });
            }
          });
        };

        TaskFormView.prototype.on_description_change = function(event) {
          return this.model.set({
            'description': $(event.target).val()
          });
        };

        TaskFormView.prototype.on_project_change = function(event) {
          return this.model.set({
            'project': $(event.target).val()
          });
        };

        TaskFormView.prototype.on_due_by_change = function(event) {
          return this.model.set({
            'due_by': $(event.target).val()
          });
        };

        return TaskFormView;

      })(Backbone.View);
    };
  })(this));

}).call(this);
