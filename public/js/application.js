// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $((function(_this) {
    return function() {
      _this.Application = (function(_super) {
        __extends(Application, _super);

        function Application() {
          _this.task_new = __bind(_this.task_new, this);
          _this.create_fixtures = __bind(_this.create_fixtures, this);
          return Application.__super__.constructor.apply(this, arguments);
        }

        Application.prototype.routes = {
          '': 'home',
          'dashboard': 'dashboard',
          'create_fixtures': 'create_fixtures',
          'task_new': 'task_new',
          'tasks_list': 'tasks_list',
          'task_view/:id': 'task_view',
          'tasks_delete_all': 'tasks_delete_all',
          'project_new': 'project_new',
          'project_edit/:id': 'project_edit',
          'project_list': 'project_list',
          'projects_delete_all': 'projects_delete_all'
        };

        Application.prototype.home = function() {
          return new HomeView({
            el: $('#content'),
            model: appServer
          }).render();
        };

        Application.prototype.dashboard = function() {
          var projects;
          projects = new Projects;
          return projects.fetch({
            success: function() {
              var tasks;
              tasks = new Tasks;
              return tasks.fetch({
                success: function() {
                  var dashboardView;
                  $.each(projects.models, function(index, project) {
                    return project.tasks = _.filter(tasks.models, function(task) {
                      return task.get('project_title') === project.get('description');
                    });
                  });
                  dashboardView = new DashboardView({
                    collection: projects,
                    el: $('#content')
                  });
                  return dashboardView.render();
                }
              });
            }
          });
        };

        Application.prototype.create_fixtures = function() {
          return appServer.create_fixtures();
        };

        Application.prototype.tasks_list = function() {
          this.tasks = new Tasks;
          this.view = new TasksTableView({
            collection: this.tasks
          });
          return this.tasks.fetch({
            success: (function(_this) {
              return function() {
                return $('#content').empty().append(_this.view.render().el);
              };
            })(this)
          });
        };

        Application.prototype.task_new = function() {
          this.taskFormView = new TaskFormView({
            model: new Task
          });
          return $('#content').empty().append(this.taskFormView.render().el);
        };

        Application.prototype.task_view = function(id) {
          var task;
          task = new Task({
            id: id
          });
          task.fetch({
            success: (function(_this) {
              return function() {
                _this.view = new TaskFormView({
                  model: task
                });
                return $('#content').empty().append(_this.view.render().el);
              };
            })(this)
          });
          return this.task = task;
        };

        Application.prototype.tasks_delete_all = function() {
          $('#content').empty();
          this.tasks = new Tasks;
          return this.tasks.delete_all();
        };

        Application.prototype.project_new = function() {
          this.projectFormView = new ProjectFormView({
            model: new Project
          });
          return $('#content').empty().append(this.projectFormView.render().el);
        };

        Application.prototype.project_edit = function(id) {
          var project;
          project = new Project({
            id: id
          });
          return project.fetch({
            success: (function(_this) {
              return function() {
                _this.view = new ProjectFormView({
                  model: project
                });
                return $('#content').empty().append(_this.view.render().el);
              };
            })(this)
          });
        };

        Application.prototype.project_list = function() {
          this.projects = new Projects;
          this.projectsTableView = new ProjectsTableView({
            collection: this.projects
          });
          return this.projects.fetch({
            success: (function(_this) {
              return function() {
                return $('#content').empty().append(_this.projectsTableView.render().el);
              };
            })(this)
          });
        };

        Application.prototype.projects_delete_all = function() {
          $('#content').empty();
          this.projects = new Projects;
          return this.projects.delete_all();
        };

        Application.prototype.logs = [];

        return Application;

      })(Backbone.Router);
      $('#view_log').on('click', function(event) {
        var text_log;
        event.preventDefault();
        $('#modal_view_log').modal('show');
        text_log = '';
        $.each(app.logs, function(index, log) {
          var json;
          json = log.data ? JSON.stringify(JSON.parse(log.data), null, 2) : '';
          if (log.type === 'request') {
            return text_log += ">>> " + log.method + " " + log.url + "\n" + json + "\n";
          } else {
            return text_log += "" + json + "\n\n";
          }
        });
        return $('#modal_view_log #log').val(text_log);
      });
      _this.app = new Application;
      _this.appServer = new ApplicationServer;
      return Backbone.history.start();
    };
  })(this));

}).call(this);
