// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $((function(_this) {
    return function() {
      return _this.RestfulModel = (function(_super) {
        __extends(RestfulModel, _super);

        function RestfulModel() {
          _this.sync = __bind(_this.sync, this);
          _this.toJSON = __bind(_this.toJSON, this);
          _this.parse = __bind(_this.parse, this);
          return RestfulModel.__super__.constructor.apply(this, arguments);
        }

        RestfulModel.prototype.parse = function(response) {
          var properties;
          properties = {};
          properties['id'] = response.instanceId;
          $.each(response.members, (function(_this) {
            return function(property, member) {
              if (member.memberType === 'property') {
                if (member.value instanceof Object) {
                  _this["" + property + "_choices"] = member.choices;
                  properties[property] = member.value.href;
                  return properties["" + property + "_title"] = member.value.title;
                } else {
                  return properties[property] = member.value;
                }
              }
            };
          })(this));
          return properties;
        };

        RestfulModel.prototype.toJSON = function() {
          var filtered, representation;
          representation = {};
          filtered = _.pick(this.attributes, this.persistableAttributes);
          $.each(filtered, function(name, value) {
            if ((value != null) && value.match('^http://')) {
              return representation[name] = {
                value: {
                  href: value
                }
              };
            } else {
              return representation[name] = {
                value: value
              };
            }
          });
          return representation;
        };

        RestfulModel.prototype.sync = function(method, model, options) {
          if (method === 'create') {
            options.attrs = {
              members: model.toJSON()
            };
          }
          return Backbone.sync(method, model, options);
        };

        return RestfulModel;

      })(Backbone.Model);
    };
  })(this));

}).call(this);
